{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAuthRequest = useAuthRequest;\nexports.useAuthRequestResult = useAuthRequestResult;\nexports.useAutoDiscovery = useAutoDiscovery;\nexports.useLoadedAuthRequest = useLoadedAuthRequest;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _AuthRequest = require(\"./AuthRequest\");\n\nvar _Discovery = require(\"./Discovery\");\n\nvar _excluded = [\"windowFeatures\"];\n\nfunction useAutoDiscovery(issuerOrDiscovery) {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      discovery = _useState2[0],\n      setDiscovery = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var isAllowed = true;\n    (0, _Discovery.resolveDiscoveryAsync)(issuerOrDiscovery).then(function (discovery) {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n    return function () {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n  return discovery;\n}\n\nfunction useLoadedAuthRequest(config, discovery, AuthRequestInstance) {\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      request = _useState4[0],\n      setRequest = _useState4[1];\n\n  var scopeString = (0, _react.useMemo)(function () {\n    var _config$scopes;\n\n    return (_config$scopes = config.scopes) == null ? void 0 : _config$scopes.join(',');\n  }, [config.scopes]);\n  var extraParamsString = (0, _react.useMemo)(function () {\n    return JSON.stringify(config.extraParams || {});\n  }, [config.extraParams]);\n  (0, _react.useEffect)(function () {\n    var isMounted = true;\n\n    if (discovery) {\n      var _request = new AuthRequestInstance(config);\n\n      _request.makeAuthUrlAsync(discovery).then(function () {\n        if (isMounted) {\n          setRequest(_request);\n        }\n      });\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [discovery == null ? void 0 : discovery.authorizationEndpoint, config.clientId, config.redirectUri, config.responseType, config.prompt, config.clientSecret, config.codeChallenge, config.state, config.usePKCE, scopeString, extraParamsString]);\n  return request;\n}\n\nfunction useAuthRequestResult(request, discovery) {\n  var customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _useState5 = (0, _react.useState)(null),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      result = _useState6[0],\n      setResult = _useState6[1];\n\n  var promptAsync = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {\n    var _customOptions$window;\n\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$windowFeatures = _ref2.windowFeatures,\n        windowFeatures = _ref2$windowFeatures === void 0 ? {} : _ref2$windowFeatures,\n        options = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n\n    if (!discovery || !request) {\n      throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n    }\n\n    var inputOptions = Object.assign({}, customOptions, options, {\n      windowFeatures: Object.assign({}, (_customOptions$window = customOptions.windowFeatures) != null ? _customOptions$window : {}, windowFeatures)\n    });\n    var result = yield request == null ? void 0 : request.promptAsync(discovery, inputOptions);\n    setResult(result);\n    return result;\n  }), [request == null ? void 0 : request.url, discovery == null ? void 0 : discovery.authorizationEndpoint]);\n  return [result, promptAsync];\n}\n\nfunction useAuthRequest(config, discovery) {\n  var request = useLoadedAuthRequest(config, discovery, _AuthRequest.AuthRequest);\n\n  var _useAuthRequestResult = useAuthRequestResult(request, discovery),\n      _useAuthRequestResult2 = (0, _slicedToArray2.default)(_useAuthRequestResult, 2),\n      result = _useAuthRequestResult2[0],\n      promptAsync = _useAuthRequestResult2[1];\n\n  return [request, result, promptAsync];\n}","map":{"version":3,"sources":["../src/AuthRequestHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useEffect, useState } from 'react';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig, AuthRequestPromptOptions } from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\n\n// @needsAudit\n/**\n * Given an OpenID Connect issuer URL, this will fetch and return the [`DiscoveryDocument`](#discoverydocument)\n * (a collection of URLs) from the resource provider.\n *\n * @param issuerOrDiscovery URL using the `https` scheme with no query or fragment component that the OP asserts as its Issuer Identifier.\n * @return Returns `null` until the [`DiscoveryDocument`](#discoverydocument) has been fetched from the provided issuer URL.\n *\n * @example\n * ```ts\n * const discovery = useAutoDiscovery('https://example.com/auth');\n * ```\n */\nexport function useAutoDiscovery(issuerOrDiscovery: IssuerOrDiscovery): DiscoveryDocument | null {\n  const [discovery, setDiscovery] = useState<DiscoveryDocument | null>(null);\n\n  useEffect(() => {\n    let isAllowed = true;\n    resolveDiscoveryAsync(issuerOrDiscovery).then((discovery) => {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n\n    return () => {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\nexport function useLoadedAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null,\n  AuthRequestInstance: typeof AuthRequest\n): AuthRequest | null {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n  const scopeString = useMemo(() => config.scopes?.join(','), [config.scopes]);\n  const extraParamsString = useMemo(\n    () => JSON.stringify(config.extraParams || {}),\n    [config.extraParams]\n  );\n  useEffect(() => {\n    let isMounted = true;\n\n    if (discovery) {\n      const request = new AuthRequestInstance(config);\n      request.makeAuthUrlAsync(discovery).then(() => {\n        if (isMounted) {\n          setRequest(request);\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    discovery?.authorizationEndpoint,\n    config.clientId,\n    config.redirectUri,\n    config.responseType,\n    config.prompt,\n    config.clientSecret,\n    config.codeChallenge,\n    config.state,\n    config.usePKCE,\n    scopeString,\n    extraParamsString,\n  ]);\n  return request;\n}\n\ntype PromptMethod = (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>;\n\nexport function useAuthRequestResult(\n  request: AuthRequest | null,\n  discovery: DiscoveryDocument | null,\n  customOptions: AuthRequestPromptOptions = {}\n): [AuthSessionResult | null, PromptMethod] {\n  const [result, setResult] = useState<AuthSessionResult | null>(null);\n\n  const promptAsync = useCallback(\n    async ({ windowFeatures = {}, ...options }: AuthRequestPromptOptions = {}) => {\n      if (!discovery || !request) {\n        throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n      }\n      const inputOptions = {\n        ...customOptions,\n        ...options,\n        windowFeatures: {\n          ...(customOptions.windowFeatures ?? {}),\n          ...windowFeatures,\n        },\n      };\n      const result = await request?.promptAsync(discovery, inputOptions);\n      setResult(result);\n      return result;\n    },\n    [request?.url, discovery?.authorizationEndpoint]\n  );\n\n  return [result, promptAsync];\n}\n\n// @needsAudit\n/**\n * Load an authorization request for a code. When the prompt method completes then the response will be fulfilled.\n *\n * > In order to close the popup window on web, you need to invoke `WebBrowser.maybeCompleteAuthSession()`.\n * > See the [Identity example](/guides/authentication.md#identityserver-4) for more info.\n *\n * If an Implicit grant flow was used, you can pass the `response.params` to `TokenResponse.fromQueryParams()`\n * to get a `TokenResponse` instance which you can use to easily refresh the token.\n *\n * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n * @param discovery A loaded [`DiscoveryDocument`](#discoverydocument) with endpoints used for authenticating.\n * Only `authorizationEndpoint` is required for requesting an authorization code.\n *\n * @return Returns a loaded request, a response, and a prompt method in a single array in the following order:\n * - `request` - An instance of [`AuthRequest`](#authrequest) that can be used to prompt the user for authorization.\n *   This will be `null` until the auth request has finished loading.\n * - `response` - This is `null` until `promptAsync` has been invoked. Once fulfilled it will return information about the authorization.\n * - `promptAsync` - When invoked, a web browser will open up and prompt the user for authentication.\n *   Accepts an [`AuthRequestPromptOptions`](#authrequestpromptoptions) object with options about how the prompt will execute.\n *   You can use this to enable the Expo proxy service `auth.expo.io`.\n *\n * @example\n * ```ts\n * const [request, response, promptAsync] = useAuthRequest({ ... }, { ... });\n * ```\n */\nexport function useAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const request = useLoadedAuthRequest(config, discovery, AuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery);\n  return [request, result, promptAsync];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}