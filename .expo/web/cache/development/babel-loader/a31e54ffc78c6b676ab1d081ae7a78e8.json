{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _jsxFileName = \"/home/circleci/repo/src/ReText.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  baseStyle: {\n    color: \"black\"\n  }\n});\n\n_reactNativeReanimated.default.addWhitelistedNativeProps({\n  text: true\n});\n\nvar AnimatedTextInput = _reactNativeReanimated.default.createAnimatedComponent(_reactNative.TextInput);\n\nvar ReText = function ReText(props) {\n  var _style$props = _objectSpread({\n    style: {}\n  }, props),\n      text = _style$props.text,\n      style = _style$props.style;\n\n  var animatedProps = (0, _reactNativeReanimated.useAnimatedProps)(function () {\n    var _f = function _f() {\n      return {\n        text: text.value\n      };\n    };\n\n    _f._closure = {\n      text: text\n    };\n    _f.asString = \"function _f(){const{text}=jsThis._closure;{return{text:text.value};}}\";\n    _f.__workletHash = 10205633828402;\n    _f.__location = \"C:\\\\Users\\\\APIWATSRINUKUL\\\\Desktop\\\\EventLoopAPP\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\ReText.js (1:1368)\";\n    return _f;\n  }());\n  return _react.default.createElement(AnimatedTextInput, {\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    value: text.value,\n    style: [styles.baseStyle, style],\n    animatedProps: animatedProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  });\n};\n\nvar _default = ReText;\nexports.default = _default;","map":{"version":3,"sources":["ReText.tsx"],"names":["styles","StyleSheet","baseStyle","color","Animated","text","AnimatedTextInput","ReText","style","animatedProps","useAnimatedProps"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHA;;AAKA,IAAMA,MAAM,GAAGC,uBAAAA,CAAAA,MAAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,KAAK,EAFT;EACa;AADoB,CAAlBF,CAAf;;AAKAG,8BAAAA,CAAAA,yBAAAA,CAAmC;EAAEC,IAAI,EAAzCD;AAAmC,CAAnCA;;AAOA,IAAME,iBAAiB,GAAGF,8BAAAA,CAAAA,uBAAAA,CAA1B,sBAA0BA,CAA1B;;AAEA,IAAMG,MAAM,GAANA,SAAAA,MAAAA,CAAS,KAATA,EAA+B;EACnC,IAAA,YAAA,GAAA,aAAA,CAAA;IAA0BC,KAAK,EAA/B;EAAA,CAAA,EAAA,KAAA,CAAA;EAAA,IAAQH,IAAR,GAAA,YAAA,CAAA,IAAA;EAAA,IAAcG,KAAd,GAAA,YAAA,CAAA,KAAA;;EACA,IAAMC,aAAa,GAAGC,IAAAA,uCAAAA;IAAAA,uBAAuB;MAC3C,OAAO;QACLL,IAAI,EAAEA,IAAI,CADZ;MAAO,CAAP;IADF,CAAsBK;;IAAAA;MAAAA,M;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;EAAAA,IAAtB;EAOA,OACE,cAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;IACE,qBAAqB,EADvB,aAAA;IAEE,QAAQ,EAFV,KAAA;IAGE,KAAK,EAAEL,IAAI,CAHb,KAAA;IAIE,KAAK,EAAE,CAACL,MAAM,CAAP,SAAA,EAJT,KAIS,CAJT;IAKQS,aAAa,EALrB,aAAA;IAAA,QAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EADF;IACE;EAAA,CAAA,CADF;AATF,CAAA;;eAoBA,M","sourcesContent":["import React from \"react\";\nimport type { TextProps as RNTextProps } from \"react-native\";\nimport { StyleSheet, TextInput } from \"react-native\";\nimport Animated, { useAnimatedProps } from \"react-native-reanimated\";\n\nconst styles = StyleSheet.create({\n  baseStyle: {\n    color: \"black\",\n  },\n});\nAnimated.addWhitelistedNativeProps({ text: true });\n\ninterface TextProps {\n  text: Animated.SharedValue<string>;\n  style?: Animated.AnimateProps<RNTextProps>[\"style\"];\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nconst ReText = (props: TextProps) => {\n  const { text, style } = { style: {}, ...props };\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: text.value,\n      // Here we use any because the text prop is not available in the type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any;\n  });\n  return (\n    <AnimatedTextInput\n      underlineColorAndroid=\"transparent\"\n      editable={false}\n      value={text.value}\n      style={[styles.baseStyle, style]}\n      {...{ animatedProps }}\n    />\n  );\n};\n\nexport default ReText;\n"]},"metadata":{},"sourceType":"script"}