{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar EventTypes = ['url'];\nvar listeners = [];\nvar _default = {\n  addEventListener: function addEventListener(type, listener) {\n    (0, _invariant.default)(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    (0, _invariant.default)(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    (0, _invariant.default)(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function () {\n    var _canOpenURL = (0, _asyncToGenerator2.default)(function* (url) {\n      return true;\n    });\n\n    function canOpenURL(_x) {\n      return _canOpenURL.apply(this, arguments);\n    }\n\n    return canOpenURL;\n  }(),\n  getInitialURL: function () {\n    var _getInitialURL = (0, _asyncToGenerator2.default)(function* () {\n      if (!_expoModulesCore.Platform.isDOMAvailable) return '';\n      return window.location.href;\n    });\n\n    function getInitialURL() {\n      return _getInitialURL.apply(this, arguments);\n    }\n\n    return getInitialURL;\n  }(),\n  openURL: function () {\n    var _openURL = (0, _asyncToGenerator2.default)(function* (url) {\n      if (_expoModulesCore.Platform.isDOMAvailable) {\n        window.location = new URL(url, window.location).toString();\n      }\n    });\n\n    function openURL(_x2) {\n      return _openURL.apply(this, arguments);\n    }\n\n    return openURL;\n  }()\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/ExpoLinking.web.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AAIA,IAAM,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAM,SAAS,GAAmE,EAAlF;eAEe;EACb,gBADa,4BACI,IADJ,EACiB,QADjB,EACsC;IACjD,IAAA,kBAAA,EACE,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADhC,mCAEiC,IAFjC;;IAIA,IAAM,cAAc,GAAsB,SAApC,cAAoC,CAAC,WAAD;MAAA,OACxC,QAAQ,CAAC;QAAE,GAAG,EAAE,MAAM,CAAC,QAAP,CAAgB,IAAvB;QAA6B,WAAW,EAAX;MAA7B,CAAD,CADgC;IAAA,CAA1C;;IAEA,SAAS,CAAC,IAAV,CAAe;MAAE,QAAQ,EAAR,QAAF;MAAY,cAAc,EAAd;IAAZ,CAAf;IACA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC,EAAmD,KAAnD;EACD,CAVY;EAYb,mBAZa,+BAYO,IAZP,EAYoB,QAZpB,EAYyC;IACpD,IAAA,kBAAA,EACE,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADhC,sCAEoC,IAFpC;IAIA,IAAM,aAAa,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAC,IAAD;MAAA,OAAU,IAAI,CAAC,QAAL,KAAkB,QAA5B;IAAA,CAApB,CAAtB;IACA,IAAA,kBAAA,EACE,aAAa,KAAK,CAAC,CADrB,EAEE,8EAFF;IAIA,IAAM,cAAc,GAAG,SAAS,CAAC,aAAD,CAAT,CAAyB,cAAhD;IACA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC,EAAsD,KAAtD;IACA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;EACD,CAzBY;EA2BP,UA3BO;IAAA,6DA2BI,GA3BJ,EA2Be;MAE1B,OAAO,IAAP;IACD,CA9BY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAgCP,aAhCO;IAAA,kEAgCM;MACjB,IAAI,CAAC,yBAAA,CAAS,cAAd,EAA8B,OAAO,EAAP;MAC9B,OAAO,MAAM,CAAC,QAAP,CAAgB,IAAvB;IACD,CAnCY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAqCP,OArCO;IAAA,0DAqCC,GArCD,EAqCY;MACvB,IAAI,yBAAA,CAAS,cAAb,EAA6B;QAE3B,MAAM,CAAC,QAAP,GAAkB,IAAI,GAAJ,CAAQ,GAAR,EAAa,MAAM,CAAC,QAApB,EAA8B,QAA9B,EAAlB;MACD;IACF,CA1CY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,C","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}