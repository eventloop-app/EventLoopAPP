{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gesture = exports.ContinousBaseGesture = exports.CALLBACK_TYPE = exports.BaseGesture = void 0;\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _handlersRegistry = require(\"../handlersRegistry\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10\n};\nexports.CALLBACK_TYPE = CALLBACK_TYPE;\nvar Gesture = (0, _createClass2.default)(function Gesture() {\n  (0, _classCallCheck2.default)(this, Gesture);\n});\nexports.Gesture = Gesture;\n\nvar BaseGesture = function (_Gesture) {\n  (0, _inherits2.default)(BaseGesture, _Gesture);\n\n  var _super = _createSuper(BaseGesture);\n\n  function BaseGesture() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, BaseGesture);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlerTag\", -1);\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlerName\", '');\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"config\", {});\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handlers\", {\n      handlerTag: -1,\n      isWorklet: [false, false, false, false]\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(BaseGesture, [{\n    key: \"addDependency\",\n    value: function addDependency(key, gesture) {\n      var value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n  }, {\n    key: \"withRef\",\n    value: function withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n  }, {\n    key: \"isWorklet\",\n    value: function isWorklet(callback) {\n      return callback.__workletHash !== undefined;\n    }\n  }, {\n    key: \"onBegin\",\n    value: function onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(callback) {\n      this.handlers.onEnd = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onFinalize\",\n    value: function onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesDown\",\n    value: function onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesMove\",\n    value: function onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesUp\",\n    value: function onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesCancelled\",\n    value: function onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled(_enabled) {\n      this.config.enabled = _enabled;\n      return this;\n    }\n  }, {\n    key: \"shouldCancelWhenOutside\",\n    value: function shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n  }, {\n    key: \"hitSlop\",\n    value: function hitSlop(_hitSlop) {\n      this.config.hitSlop = _hitSlop;\n      return this;\n    }\n  }, {\n    key: \"simultaneousWithExternalGesture\",\n    value: function simultaneousWithExternalGesture() {\n      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        gestures[_key2] = arguments[_key2];\n      }\n\n      for (var gesture of gestures) {\n        this.addDependency('simultaneousWith', gesture);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"requireExternalGestureToFail\",\n    value: function requireExternalGestureToFail() {\n      for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        gestures[_key3] = arguments[_key3];\n      }\n\n      for (var gesture of gestures) {\n        this.addDependency('requireToFail', gesture);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n      this.handlers = Object.assign({}, this.handlers, {\n        handlerTag: this.handlerTag\n      });\n\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n  }, {\n    key: \"toGestureArray\",\n    value: function toGestureArray() {\n      return [this];\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {}\n  }]);\n  return BaseGesture;\n}(Gesture);\n\nexports.BaseGesture = BaseGesture;\n\nvar ContinousBaseGesture = function (_BaseGesture) {\n  (0, _inherits2.default)(ContinousBaseGesture, _BaseGesture);\n\n  var _super2 = _createSuper(ContinousBaseGesture);\n\n  function ContinousBaseGesture() {\n    (0, _classCallCheck2.default)(this, ContinousBaseGesture);\n    return _super2.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ContinousBaseGesture, [{\n    key: \"onUpdate\",\n    value: function onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"manualActivation\",\n    value: function manualActivation(_manualActivation) {\n      this.config.manualActivation = _manualActivation;\n      return this;\n    }\n  }]);\n  return ContinousBaseGesture;\n}(BaseGesture);\n\nexports.ContinousBaseGesture = ContinousBaseGesture;","map":{"version":3,"sources":["gesture.ts"],"names":["CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","handlerTag","isWorklet","addDependency","value","Array","withRef","callback","onBegin","onStart","onEnd","onFinalize","onTouchesDown","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","simultaneousWithExternalGesture","requireExternalGestureToFail","initialize","toGestureArray","prepare","onUpdate","onChange","manualActivation"],"mappings":"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","sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    handlerTag: -1,\n    isWorklet: [false, false, false, false],\n  };\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}