{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveUri = resolveUri;\nexports.selectAssetSource = selectAssetSource;\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _pathBrowserify = _interopRequireDefault(require(\"path-browserify\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _urlParse = _interopRequireDefault(require(\"url-parse\"));\n\nvar _AssetSourceResolver = _interopRequireDefault(require(\"./AssetSourceResolver\"));\n\nvar _PlatformUtils = require(\"./PlatformUtils\");\n\nvar assetMapOverride = (0, _PlatformUtils.getManifest)().assetMapOverride;\n\nfunction selectAssetSource(meta) {\n  var _manifest2$extra, _manifest2$extra$expo;\n\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = Object.assign({}, meta, assetMapOverride[meta.hash]);\n  }\n\n  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());\n\n  var index = meta.scales.findIndex(function (s) {\n    return s === scale;\n  });\n  var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n  var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash: hash\n    };\n  }\n\n  var assetUrlOverride = (0, _PlatformUtils.getManifest)().assetUrlOverride;\n\n  if (assetUrlOverride) {\n    var _uri = _pathBrowserify.default.join(assetUrlOverride, hash);\n\n    return {\n      uri: resolveUri(_uri),\n      hash: hash\n    };\n  }\n\n  var fileScale = scale === 1 ? '' : \"@\" + scale + \"x\";\n  var fileExtension = meta.type ? \".\" + encodeURIComponent(meta.type) : '';\n  var suffix = \"/\" + encodeURIComponent(meta.name) + fileScale + fileExtension + \"?platform=\" + encodeURIComponent(_expoModulesCore.Platform.OS) + \"&hash=\" + encodeURIComponent(meta.hash);\n\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    var _uri2 = meta.httpServerLocation + suffix;\n\n    return {\n      uri: _uri2,\n      hash: hash\n    };\n  }\n\n  var manifest2 = (0, _PlatformUtils.getManifest2)();\n\n  if (manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoGo) != null && _manifest2$extra$expo.developer) {\n    var baseUrl = new _urlParse.default(\"http://\" + manifest2.extra.expoGo.debuggerHost);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash: hash\n    };\n  }\n\n  if ((0, _PlatformUtils.getManifest)().developer) {\n    var _baseUrl = new _urlParse.default((0, _PlatformUtils.getManifest)().bundleUrl);\n\n    _baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: _baseUrl.href,\n      hash: hash\n    };\n  }\n\n  return {\n    uri: \"https://classic-assets.eascdn.net/~assets/\" + encodeURIComponent(hash),\n    hash: hash\n  };\n}\n\nfunction resolveUri(uri) {\n  if (!_PlatformUtils.manifestBaseUrl) {\n    return uri;\n  }\n\n  var _URL = new _urlParse.default(uri),\n      protocol = _URL.protocol;\n\n  if (protocol !== '') {\n    return uri;\n  }\n\n  var baseUrl = new _urlParse.default(_PlatformUtils.manifestBaseUrl);\n  var resolvedPath = uri.startsWith('/') ? uri : _pathBrowserify.default.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}","map":{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { manifestBaseUrl, getManifest, getManifest2 } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}