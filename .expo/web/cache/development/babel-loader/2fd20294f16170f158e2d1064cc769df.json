{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"WebBrowserPresentationStyle\", {\n  enumerable: true,\n  get: function get() {\n    return _WebBrowser.WebBrowserPresentationStyle;\n  }\n});\nObject.defineProperty(exports, \"WebBrowserResultType\", {\n  enumerable: true,\n  get: function get() {\n    return _WebBrowser.WebBrowserResultType;\n  }\n});\nexports.coolDownAsync = coolDownAsync;\nexports.dismissAuthSession = dismissAuthSession;\nexports.dismissBrowser = dismissBrowser;\nexports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;\nexports.mayInitWithUrlAsync = mayInitWithUrlAsync;\nexports.maybeCompleteAuthSession = maybeCompleteAuthSession;\nexports.openAuthSessionAsync = openAuthSessionAsync;\nexports.openBrowserAsync = openBrowserAsync;\nexports.warmUpAsync = warmUpAsync;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _ExpoWebBrowser = _interopRequireDefault(require(\"./ExpoWebBrowser\"));\n\nvar _WebBrowser = require(\"./WebBrowser.types\");\n\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\n\nfunction getCustomTabsSupportingBrowsersAsync() {\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\n\nfunction _getCustomTabsSupportingBrowsersAsync() {\n  _getCustomTabsSupportingBrowsersAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n\n    if (_reactNative.Platform.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return yield _ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync();\n    }\n  });\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\n\nfunction warmUpAsync(_x) {\n  return _warmUpAsync.apply(this, arguments);\n}\n\nfunction _warmUpAsync() {\n  _warmUpAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n    if (!_ExpoWebBrowser.default.warmUpAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.warmUpAsync(browserPackage);\n    }\n  });\n  return _warmUpAsync.apply(this, arguments);\n}\n\nfunction mayInitWithUrlAsync(_x2, _x3) {\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\n\nfunction _mayInitWithUrlAsync() {\n  _mayInitWithUrlAsync = (0, _asyncToGenerator2.default)(function* (url, browserPackage) {\n    if (!_ExpoWebBrowser.default.mayInitWithUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage);\n    }\n  });\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\n\nfunction coolDownAsync(_x4) {\n  return _coolDownAsync.apply(this, arguments);\n}\n\nfunction _coolDownAsync() {\n  _coolDownAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n    if (!_ExpoWebBrowser.default.coolDownAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.coolDownAsync(browserPackage);\n    }\n  });\n  return _coolDownAsync.apply(this, arguments);\n}\n\nvar browserLocked = false;\n\nfunction openBrowserAsync(_x5) {\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nfunction _openBrowserAsync() {\n  _openBrowserAsync = (0, _asyncToGenerator2.default)(function* (url) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!_ExpoWebBrowser.default.openBrowserAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n\n    if (browserLocked) {\n      if (__DEV__) {\n        console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n      }\n\n      return {\n        type: _WebBrowser.WebBrowserResultType.LOCKED\n      };\n    }\n\n    browserLocked = true;\n    var result;\n\n    try {\n      result = yield _ExpoWebBrowser.default.openBrowserAsync(url, browserParams);\n    } finally {\n      browserLocked = false;\n    }\n\n    return result;\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\n\nfunction dismissBrowser() {\n  if (!_ExpoWebBrowser.default.dismissBrowser) {\n    throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  _ExpoWebBrowser.default.dismissBrowser();\n}\n\nfunction openAuthSessionAsync(_x6, _x7) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = (0, _asyncToGenerator2.default)(function* (url, redirectUrl) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.openAuthSessionAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n\n      if (['ios', 'web'].includes(_reactNative.Platform.OS)) {\n        return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl, options);\n      }\n\n      return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\n\nfunction dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!_ExpoWebBrowser.default.dismissAuthSession) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    _ExpoWebBrowser.default.dismissAuthSession();\n  } else {\n    if (!_ExpoWebBrowser.default.dismissBrowser) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    _ExpoWebBrowser.default.dismissBrowser();\n  }\n}\n\nfunction maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (_ExpoWebBrowser.default.maybeCompleteAuthSession) {\n    return _ExpoWebBrowser.default.maybeCompleteAuthSession(options);\n  }\n\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\n\nfunction _authSessionIsNativelySupported() {\n  if (_reactNative.Platform.OS === 'android') {\n    return false;\n  } else if (_reactNative.Platform.OS === 'web') {\n    return true;\n  }\n\n  var versionNumber = parseInt(String(_reactNative.Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\n\nvar _isAppStateAvailable = _reactNative.AppState.currentState !== null;\n\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nfunction _openBrowserAndWaitAndroidAsync(_x8) {\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\n\nfunction _openBrowserAndWaitAndroidAsync2() {\n  _openBrowserAndWaitAndroidAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var appStateChangedToActive = new Promise(function (resolve) {\n      _onWebBrowserCloseAndroid = resolve;\n    });\n\n    var stateChangeSubscription = _reactNative.AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n    var result = {\n      type: _WebBrowser.WebBrowserResultType.CANCEL\n    };\n    var type = null;\n\n    try {\n      var _yield$openBrowserAsy = yield openBrowserAsync(startUrl, browserParams);\n\n      type = _yield$openBrowserAsy.type;\n    } catch (e) {\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      throw e;\n    }\n\n    if (type === 'opened') {\n      yield appStateChangedToActive;\n      result = {\n        type: _WebBrowser.WebBrowserResultType.DISMISS\n      };\n    }\n\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  });\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\n\nfunction _openAuthSessionPolyfillAsync(_x9, _x10) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl, returnUrl) {\n    var browserParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (_redirectHandler) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n    }\n\n    try {\n      if (_reactNative.Platform.OS === 'android') {\n        return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return yield Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      if (_ExpoWebBrowser.default.dismissBrowser) {\n        _ExpoWebBrowser.default.dismissBrowser();\n      }\n\n      _stopWaitingForRedirect();\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n\n  _reactNative.Linking.removeEventListener('url', _redirectHandler);\n\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    _redirectHandler = function _redirectHandler(event) {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    _reactNative.Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { AppState, AppStateStatus, Linking, Platform } from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-browserparams).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{type: 'opened'}` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\n// @needsAudit\n/**\n * # On iOS:\n * Opens the url with Safari in a modal using `SFAuthenticationSession` on iOS 11 and greater,\n * and falling back on a `SFSafariViewController`. The user will be asked whether to allow the app\n * to authenticate using the given url.\n *\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](../react-native/appstate/),\n * and [Linking](./linking/) APIs.\n *\n * # On web:\n * > This API can only be used in a secure environment (`https`). You can use expo `start:web --https`\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#errwebbrowsercrypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `expo start:web --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#errwebbrowserblocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app. By default, this will be [`Constants.linkingUrl`](./constants/#expoconstantslinkinguri).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, options);\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<WebBrowserRedirectResult> {\n  return new Promise((resolve) => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}