{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQueryString = buildQueryString;\nexports.getQueryParams = getQueryParams;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nfunction buildQueryString(input) {\n  return _qs.default.stringify(input);\n}\n\nfunction getQueryParams(url) {\n  var _parsedSearch$errorCo;\n\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  var parsedSearch = _qs.default.parse(queryString, {\n    parseArrays: false\n  });\n\n  var errorCode = (_parsedSearch$errorCo = parsedSearch.errorCode) != null ? _parsedSearch$errorCo : null;\n  (0, _invariant.default)(typeof errorCode === 'string' || errorCode === null, \"The \\\"errorCode\\\" parameter must be a string if specified\");\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = _qs.default.parse(hash);\n  }\n\n  var params = Object.assign({}, parsedSearch, parsedHash);\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}","map":{"version":3,"sources":["../src/QueryParams.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;AAEM,SAAU,gBAAV,CAA2B,KAA3B,EAAwD;EAC5D,OAAO,WAAA,CAAG,SAAH,CAAa,KAAb,CAAP;AACD;;AAEK,SAAU,cAAV,CAAyB,GAAzB,EAAoC;EAAA;;EAIxC,IAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAd;EACA,IAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;EACA,IAAM,gBAAgB,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,GAAf,CAAzB;EACA,IAAM,WAAW,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,MAAjB,GAA0B,CAA3B,CAApC;;EAGA,IAAM,YAAY,GAAG,WAAA,CAAG,KAAH,CAAS,WAAT,EAAsB;IAAE,WAAW,EAAE;EAAf,CAAtB,CAArB;;EAGA,IAAM,SAAS,4BAAI,YAAY,CAAC,SAAjB,oCAA8B,IAA7C;EACA,IAAA,kBAAA,EACE,OAAO,SAAP,KAAqB,QAArB,IAAiC,SAAS,KAAK,IADjD;EAIA,OAAO,YAAY,CAAC,SAApB;EAGA,IAAI,UAAU,GAAG,EAAjB;;EACA,IAAI,KAAK,CAAC,CAAD,CAAT,EAAc;IACZ,UAAU,GAAG,WAAA,CAAG,KAAH,CAAS,IAAT,CAAb;EACD;;EAGD,IAAM,MAAM,qBACP,YADO,EAEP,UAFO,CAAZ;EAKA,OAAO;IACL,SAAS,EAAT,SADK;IAEL,MAAM,EAAN;EAFK,CAAP;AAID","sourcesContent":["import invariant from 'invariant';\nimport qs from 'qs';\n\nexport function buildQueryString(input: Record<string, string>): string {\n  return qs.stringify(input);\n}\n\nexport function getQueryParams(url: string): {\n  errorCode: string | null;\n  params: { [key: string]: string };\n} {\n  const parts = url.split('#');\n  const hash = parts[1];\n  const partsWithoutHash = parts[0].split('?');\n  const queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  const parsedSearch = qs.parse(queryString, { parseArrays: false });\n\n  // Pull errorCode off of params\n  const errorCode = (parsedSearch.errorCode ?? null) as string | null;\n  invariant(\n    typeof errorCode === 'string' || errorCode === null,\n    `The \"errorCode\" parameter must be a string if specified`\n  );\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  const params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}