{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRandomBytes = getRandomBytes;\nexports.getRandomBytesAsync = getRandomBytesAsync;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _base64Js = require(\"base64-js\");\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _ExpoRandom = _interopRequireDefault(require(\"./ExpoRandom\"));\n\nfunction assertByteCount(value, methodName) {\n  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n    throw new TypeError(\"expo-random: \" + methodName + \"(\" + value + \") expected a valid number from range 0...1024\");\n  }\n}\n\nfunction getRandomBytes(byteCount) {\n  assertByteCount(byteCount, 'getRandomBytes');\n  var validByteCount = Math.floor(byteCount);\n\n  if (__DEV__) {\n    if (!global.nativeCallSyncHook || global.__REMOTEDEV__) {\n      var array = new Uint8Array(validByteCount);\n\n      for (var i = 0; i < validByteCount; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n\n      return array;\n    }\n  }\n\n  if (_ExpoRandom.default.getRandomBytes) {\n    return _ExpoRandom.default.getRandomBytes(validByteCount);\n  } else if (_ExpoRandom.default.getRandomBase64String) {\n    var base64 = _ExpoRandom.default.getRandomBase64String(validByteCount);\n\n    return (0, _base64Js.toByteArray)(base64);\n  } else {\n    throw new _expoModulesCore.UnavailabilityError('expo-random', 'getRandomBytes');\n  }\n}\n\nfunction getRandomBytesAsync(_x) {\n  return _getRandomBytesAsync.apply(this, arguments);\n}\n\nfunction _getRandomBytesAsync() {\n  _getRandomBytesAsync = (0, _asyncToGenerator2.default)(function* (byteCount) {\n    assertByteCount(byteCount, 'getRandomBytesAsync');\n    var validByteCount = Math.floor(byteCount);\n\n    if (_ExpoRandom.default.getRandomBytesAsync) {\n      return yield _ExpoRandom.default.getRandomBytesAsync(validByteCount);\n    } else if (_ExpoRandom.default.getRandomBase64StringAsync) {\n      var base64 = yield _ExpoRandom.default.getRandomBase64StringAsync(validByteCount);\n      return (0, _base64Js.toByteArray)(base64);\n    } else {\n      throw new _expoModulesCore.UnavailabilityError('expo-random', 'getRandomBytesAsync');\n    }\n  });\n  return _getRandomBytesAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Random.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,SAAS,eAAT,CAAyB,KAAzB,EAAqC,UAArC,EAAuD;EACrD,IACE,OAAO,KAAP,KAAiB,QAAjB,IACA,KAAK,CAAC,KAAD,CADL,IAEA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,CAFpB,IAGA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,IAJtB,EAKE;IACA,MAAM,IAAI,SAAJ,mBACY,UADZ,SAC0B,KAD1B,mDAAN;EAGD;AACF;;AAUK,SAAU,cAAV,CAAyB,SAAzB,EAA0C;EAC9C,eAAe,CAAC,SAAD,EAAY,gBAAZ,CAAf;EACA,IAAM,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,SAAX,CAAvB;;EACA,IAAI,OAAJ,EAAa;IACX,IAAI,CAAC,MAAM,CAAC,kBAAR,IAA8B,MAAM,CAAC,aAAzC,EAAwD;MAEtD,IAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,cAAf,CAAd;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;QACvC,KAAK,CAAC,CAAD,CAAL,GAAW,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,GAA3B,CAAX;MACD;;MACD,OAAO,KAAP;IACD;EACF;;EACD,IAAI,mBAAA,CAAW,cAAf,EAA+B;IAC7B,OAAO,mBAAA,CAAW,cAAX,CAA0B,cAA1B,CAAP;EACD,CAFD,MAEO,IAAI,mBAAA,CAAW,qBAAf,EAAsC;IAC3C,IAAM,MAAM,GAAG,mBAAA,CAAW,qBAAX,CAAiC,cAAjC,CAAf;;IACA,OAAO,IAAA,qBAAA,EAAY,MAAZ,CAAP;EACD,CAHM,MAGA;IACL,MAAM,IAAI,oCAAJ,CAAwB,aAAxB,EAAuC,gBAAvC,CAAN;EACD;AACF;;SASqB,mB;;;;;yDAAf,WAAmC,SAAnC,EAAoD;IACzD,eAAe,CAAC,SAAD,EAAY,qBAAZ,CAAf;IACA,IAAM,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,SAAX,CAAvB;;IACA,IAAI,mBAAA,CAAW,mBAAf,EAAoC;MAClC,aAAa,mBAAA,CAAW,mBAAX,CAA+B,cAA/B,CAAb;IACD,CAFD,MAEO,IAAI,mBAAA,CAAW,0BAAf,EAA2C;MAChD,IAAM,MAAM,SAAS,mBAAA,CAAW,0BAAX,CAAsC,cAAtC,CAArB;MACA,OAAO,IAAA,qBAAA,EAAY,MAAZ,CAAP;IACD,CAHM,MAGA;MACL,MAAM,IAAI,oCAAJ,CAAwB,aAAxB,EAAuC,qBAAvC,CAAN;IACD;EACF,C","sourcesContent":["import { toByteArray } from 'base64-js';\nimport { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoRandom from './ExpoRandom';\n\nfunction assertByteCount(value: any, methodName: string): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-random: ${methodName}(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\n// @needsAudit\n/**\n * Generates completely random bytes using native implementations. The `byteCount` property\n * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n * Falls back to `Math.random` during development to prevent issues with React Native Debugger.\n * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n * @return An array of random bytes with the same length as the `byteCount`.\n */\nexport function getRandomBytes(byteCount: number): Uint8Array {\n  assertByteCount(byteCount, 'getRandomBytes');\n  const validByteCount = Math.floor(byteCount);\n  if (__DEV__) {\n    if (!global.nativeCallSyncHook || global.__REMOTEDEV__) {\n      // remote javascript debugging is enabled\n      const array = new Uint8Array(validByteCount);\n      for (let i = 0; i < validByteCount; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n      return array;\n    }\n  }\n  if (ExpoRandom.getRandomBytes) {\n    return ExpoRandom.getRandomBytes(validByteCount);\n  } else if (ExpoRandom.getRandomBase64String) {\n    const base64 = ExpoRandom.getRandomBase64String(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytes');\n  }\n}\n\n// @needsAudit\n/**\n * Generates completely random bytes using native implementations. The `byteCount` property\n * is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.\n * @param byteCount - A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.\n * @return A promise that fulfills with an array of random bytes with the same length as the `byteCount`.\n */\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount, 'getRandomBytesAsync');\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytesAsync) {\n    return await ExpoRandom.getRandomBytesAsync(validByteCount);\n  } else if (ExpoRandom.getRandomBase64StringAsync) {\n    const base64 = await ExpoRandom.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}